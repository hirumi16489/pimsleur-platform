AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Auth stack: User identity and restrictions (custom domain enforced)'

Parameters:
  StackName:
    Type: String
  #   GoogleOauthSecretName:
  #     Type: String
  #     Default: "GOOGLE_OAUTH"
  #     Description: "Secrets Manager secret with keys CLIENT_ID and CLIENT_SECRET"
  # Frontend callbacks (local + prod)
  CallbackUrls:
    Type: CommaDelimitedList
    Default: 'http://localhost:3000/api/auth/callback,https://pimsleur.dragoneertechnology.com/api/auth/callback'
  LogoutUrls:
    Type: CommaDelimitedList
    Default: 'http://localhost:3000/,https://pimsleur.dragoneertechnology.com/'

  # ✅ Custom domain is REQUIRED
  CustomCognitoDomain:
    Type: String # e.g. auth.pimsleur.dragoneertechnology.com (no https://)
    AllowedPattern: '^[a-z0-9.-]+$'
    ConstraintDescription: 'Use a hostname only, like auth.example.com'
  UsEast1CertArnForCognito:
    Type: String # ACM public cert **in us-east-1**
    AllowedPattern: '^arn:aws:acm:us-east-1:[0-9]{12}:certificate\/[0-9a-f-]+$'
    ConstraintDescription: 'Must be an ACM cert ARN in us-east-1'
  HostedZoneId:
    Type: String # Public Route53 zone ID for your root domain

Rules:
  RequireCustomDomain:
    Assertions:
      - Assert: !Not [!Equals [!Ref CustomCognitoDomain, '']]
        AssertDescription: 'CustomCognitoDomain is required'
      - Assert: !Not [!Equals [!Ref UsEast1CertArnForCognito, '']]
        AssertDescription: 'UsEast1CertArnForCognito is required (must be in us-east-1)'
      - Assert: !Not [!Equals [!Ref HostedZoneId, '']]
        AssertDescription: 'HostedZoneId is required (public hosted zone for your domain)'

Resources:
  ## User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${StackName}-user-pool'
      AutoVerifiedAttributes: [email]
      UsernameAttributes: [email]
      Schema:
        - Name: email
          Required: true
          Mutable: true

  ## App client (PKCE: code flow, no client secret)
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: web-nextjs
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code]
      AllowedOAuthScopes: [openid, email, profile]
      SupportedIdentityProviders: [COGNITO] # add "Google" later if needed
      CallbackURLs: !Ref CallbackUrls
      LogoutURLs: !Ref LogoutUrls
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
  # GoogleIdP:
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Properties:
  #     ProviderName: Google
  #     ProviderType: Google
  #     UserPoolId: !Ref CognitoUserPool
  #     ProviderDetails:
  #       client_id: "{{resolve:secretsmanager:${GoogleOauthSecretName}:SecretString:CLIENT_ID}}"
  #       client_secret: "{{resolve:secretsmanager:${GoogleOauthSecretName}:SecretString:CLIENT_SECRET}}"
  #       authorize_scopes: "openid email profile"
  #     AttributeMapping:
  #       email: "email"
  #       given_name: "given_name"
  #       family_name: "family_name"

  # Hosted UI: custom domain only (served via CloudFront)
  CognitoUserPoolDomainCustom:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Ref CustomCognitoDomain
      ManagedLoginVersion: 2
      CustomDomainConfig:
        CertificateArn: !Ref UsEast1CertArnForCognito # must be us-east-1

  ## Route 53 alias to Cognito’s CloudFront distribution (required)
  CognitoDomainAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref CustomCognitoDomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt CognitoUserPoolDomainCustom.CloudFrontDistribution
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront global zone ID
        EvaluateTargetHealth: false

  ## (Optional) Identity Pool — keep if you actually use it; safe to remove otherwise
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${StackName}-identity-pool'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}'

  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Federated: cognito-identity.amazonaws.com }
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              'ForAnyValue:StringLike':
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:CreateMultipartUpload
                  - s3:UploadPart
                  - s3:CompleteMultipartUpload
                Resource: !Sub 'arn:aws:s3:::${StackName}-user-uploads/*'

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthRole.Arn

Outputs:
  CognitoUserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Export: { Name: CognitoUserPoolArn }
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Export: { Name: CognitoUserPoolId }
  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Export: { Name: CognitoUserPoolClientId }
  HostedUiBase:
    Description: 'Hosted UI base URL'
    Value: !Sub 'https://${CustomCognitoDomain}'
